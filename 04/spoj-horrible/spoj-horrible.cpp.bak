#include <bits/stdc++.h>

#define NMAX 1000001

using namespace std;

typedef long long ll;


ll bit1[NMAX];
ll bit2[NMAX];
/*
void update(ll* bit, int k, ll x, int n){
    while(k <= n){
        bit[k] += x;
        k += (k & -k);
    }
    return;
    }*/

void update(long long bit[], int idx, long long val){
    for(int x = idx;x <= 100001;x += x & -x)
        bit[x] += val;
}

void range_update(int l, int r, ll x, int n){
    update(bit1, l, x);
    update(bit1, r+1, -x);
    update(bit2, l, x*(l-1));
    update(bit2, r+1, -x*r);
    return;
}
/*
ll sum(ll* bit, int k){
    ll s = 0;
    while(k >= 1){
        s += bit[k];
        k -= (k & -k);
    }
    return s;
}
*/




long long query(long long bit[], int idx){
    long long ret = 0;
    
    for(int x = idx;x > 0;x -= x & -x)
        ret += bit[x];
    
    return ret;
}
/*
ll prefix_sum(int k){
    return sum(bit1, k)*k - sum(bit2, k);
}


ll range_sum(int l, int r){
    return prefix_sum(r) - prefix_sum(l-1);
}
*/

int main(){
    int t;
    scanf("%d", &t);

    while(t--){
        int n, c;
        scanf("%d %d", &n, &c);

        memset(bit1,0,sizeof bit1);
        memset(bit2,0,sizeof bit2);
        
        while(c--){
            int cmd;
            scanf("%d", &cmd);

            int p, q;
            int v;

    
            
            switch(cmd){
            case 0:
                {
                    // range add v to [p,q]
                    scanf("%d %d %d", &p, &q, &v);
                    //range_update(p, q, v, n);
                    update(bit1,p,v);
                    update(bit1,q + 1,-v);
                    update(bit2,p,-(long long)v * (p - 1));
                    update(bit2,q + 1,(long long)v * q);
                }
                break;
            case 1:
                {
                    // range sum of [p,q]
                    scanf("%d %d", &p, &q);
                    // printf("%lld\n", range_sum(p, q));
                    printf("%lld\n",
                           query(bit1,q) * q + query(bit2,q)
                           - query(bit1,p - 1) * (p - 1) - query(bit2,p - 1));
   
                }
                break;
            }

            //print_bit(b1, n);
            //print_bit(b2, n);
        }
        
    }

    return 0;
}
